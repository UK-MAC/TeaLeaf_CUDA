/*
 *  Kernels used to generate chunks
 */

__global__ void device_generate_chunk_kernel
(kernel_info_t kernel_info,
const double* __restrict const vertexx,
const double* __restrict const vertexy,
const double* __restrict const cellx,
const double* __restrict const celly,
      double* __restrict const density,
      double* __restrict const energy0,
      double* __restrict const u,

const double* __restrict const state_density,
const double* __restrict const state_energy,
const double* __restrict const state_xmin,
const double* __restrict const state_xmax,
const double* __restrict const state_ymin,
const double* __restrict const state_ymax,
const double* __restrict const state_radius,
const int   * __restrict const state_geometry,
const int g_rect,
const int g_circ,
const int g_point,
const int state)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        const double x_cent = state_xmin[state];
        const double y_cent = state_ymin[state];

        if (g_rect == state_geometry[state])
        {
            if (vertexx[1 + column] >= state_xmin[state]
            && vertexx[column] <  state_xmax[state]
            && vertexy[1 + row]    >= state_ymin[state]
            && vertexy[row]    <  state_ymax[state])
            {
                energy0[THARR2D(0, 0, 0)] = state_energy[state];
                density[THARR2D(0, 0, 0)] = state_density[state];
            }
        }
        else if (state_geometry[state] == g_circ)
        {
            double x_pos = cellx[column]-x_cent;
            double y_pos = celly[row]-y_cent;
            double radius = sqrt(x_pos*x_pos + y_pos*y_pos);

            if (radius <= state_radius[state])
            {
                energy0[THARR2D(0, 0, 0)] = state_energy[state];
                density[THARR2D(0, 0, 0)] = state_density[state];
            }
        }
        else if (state_geometry[state] == g_point)
        {
            if (vertexx[column] == x_cent && vertexy[row] == y_cent)
            {
                energy0[THARR2D(0, 0, 0)] = state_energy[state];
                density[THARR2D(0, 0, 0)] = state_density[state];
            }
        }
    }
}

__global__ void device_generate_chunk_init_u
(kernel_info_t kernel_info,
 const double * density,
 const double * energy,
       double * u,
       double * u0)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        u[THARR2D(0, 0, 0)] = energy[THARR2D(0, 0, 0)]*density[THARR2D(0, 0, 0)];
        u0[THARR2D(0, 0, 0)] = energy[THARR2D(0, 0, 0)]*density[THARR2D(0, 0, 0)];
    }
}

__global__ void device_generate_chunk_init
(kernel_info_t kernel_info,
      double* density,
      double* energy0,
const double* state_density,
const double* state_energy)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        energy0[THARR2D(0, 0, 0)] = state_energy[0];
        density[THARR2D(0, 0, 0)] = state_density[0];
    }
}

