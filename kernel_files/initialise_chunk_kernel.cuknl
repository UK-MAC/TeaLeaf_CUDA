#include <cstdio>

__global__ void device_initialise_chunk_kernel_vertex_cuda
(kernel_info_t kernel_info,
const double d_xmin,
const double d_ymin,
const double d_dx,
const double d_dy,
double* __restrict const vertexx,
double* __restrict const vertexdx,
double* __restrict const vertexy,
double* __restrict const vertexdy,
double * __restrict const cellx,
double * __restrict const celldx,
double * __restrict const celly,
double * __restrict const celldy)
{
    __kernel_indexes;

    // fill out x arrays
    if (row == HALO_DEPTH && column <= (x_max + HALO_DEPTH))
    {
        vertexx[column] = d_xmin + d_dx*(double)((((int)column) - 1) - HALO_DEPTH + 1);
        vertexdx[column] = d_dx;
    }

    // fill out y arrays
    if (column == HALO_DEPTH && row <= (y_max + HALO_DEPTH))
    {
        vertexy[row] = d_ymin + d_dy*(double)((((int)row) - 1) - HALO_DEPTH + 1);
        vertexdy[row] = d_dy;
    }

    const double vertexx_plusone = d_xmin + d_dx*(double)((((int)column)) - HALO_DEPTH + 1);
    const double vertexy_plusone = d_ymin + d_dy*(double)((((int)row)) - HALO_DEPTH + 1);

    //fill x arrays
    if (row == HALO_DEPTH && column <= (x_max + HALO_DEPTH))
    {
        cellx[column] = 0.5 * (vertexx[column] + vertexx_plusone);
        celldx[column] = d_dx;
    }

    //fill y arrays
    if (column == HALO_DEPTH && row <= (y_max + HALO_DEPTH))
    {
        celly[row] = 0.5 * (vertexy[row] + vertexy_plusone);
        celldy[row] = d_dy;
    }
}

__global__ void device_initialise_chunk_kernel_cuda
(kernel_info_t kernel_info,
const double d_xmin,
const double d_ymin,
const double d_dx,
const double d_dy,
      double* __restrict const volume, 
      double* __restrict const xarea, 
      double* __restrict const yarea)
{
    __kernel_indexes;

    if (row >= (y_min + 1) - 2 && row <= (y_max + 1) + 2 + HALO_DEPTH
    && column >= (x_min + 1) - 2 && column <= (x_max + 1) + 2 + HALO_DEPTH)
    {
        volume[THARR2D(0, 0, 0)] = d_dx * d_dy;
        xarea[THARR2D(0, 0, 1)] = d_dy;
        yarea[THARR2D(0, 0, 0)] = d_dx;
    }
}

