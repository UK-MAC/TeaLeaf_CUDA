/*
 *  Kernels for field summary
 */

__global__ void device_field_summary_kernel
(kernel_info_t kernel_info,
      double* __restrict const volume,
const double* __restrict const density,
const double* __restrict const energy,
const double* __restrict const u,
      double* __restrict const vol,
      double* __restrict const mass,
      double* __restrict const ie,
      double* __restrict const temp)
{
    __kernel_indexes;

    __shared__ double vol_shared[BLOCK_SZ];
    __shared__ double mass_shared[BLOCK_SZ];
    __shared__ double ie_shared[BLOCK_SZ];
    __shared__ double temp_shared[BLOCK_SZ];
    vol_shared[lid] = 0.0;
    mass_shared[lid] = 0.0;
    ie_shared[lid] = 0.0;
    temp_shared[lid] = 0.0;

    if (WITHIN_BOUNDS)
    {
        double cell_vol = volume[THARR2D(0, 0, 0)];
        double cell_mass = cell_vol * density[THARR2D(0, 0, 0)];

        vol_shared[lid] = cell_vol;
        mass_shared[lid] = cell_mass;
        ie_shared[lid] = cell_mass * energy[THARR2D(0, 0, 0)];
        temp_shared[lid] = cell_mass*u[THARR2D(0, 0, 0)];
    }

    __syncthreads();
    for (int offset = BLOCK_SZ / 2; offset > 0; offset /= 2)
    {
        if (lid < offset)
        {
            vol_shared[lid] += vol_shared[lid + offset];
            mass_shared[lid] += mass_shared[lid + offset];
            ie_shared[lid] += ie_shared[lid + offset];
            temp_shared[lid] += temp_shared[lid + offset];
        }
        __syncthreads();
    }

    if (!lid)
    {
        vol[block_id] = vol_shared[0];
        mass[block_id] = mass_shared[0];
        ie[block_id] = ie_shared[0];
        temp[block_id] = temp_shared[0];
    }
}

