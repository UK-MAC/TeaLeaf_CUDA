/*
 *  Kernels used for conjugate gradient method
 */

__global__ void device_tea_leaf_cg_solve_init_p
(int x_min, int x_max, int y_min, int y_max,
       double * __restrict const p,
       double * __restrict const r,
       double * __restrict const z,
       double * __restrict const Mi,
       double * __restrict const rro,
 int PRECONDITIONER)
{
    __kernel_indexes;

    __shared__ double rro_shared[BLOCK_SZ];
    rro_shared[lid] = 0.0;

    if (WITHIN_BOUNDS)
    {
        if (PRECONDITIONER == TL_PREC_JAC_BLOCK)
        {
            // z initialised when block_solve kernel is called before this
            p[THARR2D(0, 0, 0)] = z[THARR2D(0, 0, 0)];
        }
        else if (PRECONDITIONER == TL_PREC_JAC_DIAG)
        {
            z[THARR2D(0, 0, 0)] = r[THARR2D(0, 0, 0)]*Mi[THARR2D(0, 0, 0)];
            p[THARR2D(0, 0, 0)] = z[THARR2D(0, 0, 0)];
        }
        else if (PRECONDITIONER == TL_PREC_NONE)
        {
            p[THARR2D(0, 0, 0)] = r[THARR2D(0, 0, 0)];
        }

        rro_shared[lid] = r[THARR2D(0, 0, 0)]*p[THARR2D(0, 0, 0)];
    }

    Reduce< double, BLOCK_SZ/2 >::run(rro_shared, rro, SUM);
}

/* reduce rro */

__global__ void device_tea_leaf_cg_solve_calc_w
(int x_min, int x_max, int y_min, int y_max,
       double * __restrict const pw,
 const double * __restrict const p,
       double * __restrict const w,
 const double * __restrict const Kx,
 const double * __restrict const Ky)
{
    __kernel_indexes;

    __shared__ double pw_shared[BLOCK_SZ];
    pw_shared[lid] = 0.0;

    if (WITHIN_BOUNDS)
    {
        w[THARR2D(0, 0, 0)] = (1.0
            + (Ky[THARR2D(0, 1, 0)] + Ky[THARR2D(0, 0, 0)])
            + (Kx[THARR2D(1, 0, 0)] + Kx[THARR2D(0, 0, 0)]))*p[THARR2D(0, 0, 0)]
            - (Ky[THARR2D(0, 1, 0)]*p[THARR2D(0, 1, 0)] + Ky[THARR2D(0, 0, 0)]*p[THARR2D(0, -1, 0)])
            - (Kx[THARR2D(1, 0, 0)]*p[THARR2D(1, 0, 0)] + Kx[THARR2D(0, 0, 0)]*p[THARR2D(-1, 0, 0)]);
        
        pw_shared[lid] = p[THARR2D(0, 0, 0)]*w[THARR2D(0, 0, 0)];
    }

    Reduce< double, BLOCK_SZ/2 >::run(pw_shared, pw, SUM);
}

/* reduce pw */

__global__ void device_tea_leaf_cg_solve_calc_ur
(int x_min, int x_max, int y_min, int y_max,
 double alpha,
       double * __restrict const rrn,
       double * __restrict const u,
 const double * __restrict const p,
       double * __restrict const r,
 const double * __restrict const w,
       double * __restrict const z,
 const double * __restrict const Mi,
 bool PRECONDITIONER)
{
    __kernel_indexes;

    __shared__ double rrn_shared[BLOCK_SZ];
    rrn_shared[lid] = 0.0;

    // as above
    double rrn_val;

    if (WITHIN_BOUNDS)
    {
        u[THARR2D(0, 0, 0)] += alpha*p[THARR2D(0, 0, 0)];
        r[THARR2D(0, 0, 0)] -= alpha*w[THARR2D(0, 0, 0)];
        
        if (PRECONDITIONER)
        {
            z[THARR2D(0, 0, 0)] = Mi[THARR2D(0, 0, 0)]*r[THARR2D(0, 0, 0)];
            rrn_val = r[THARR2D(0, 0, 0)]*z[THARR2D(0, 0, 0)];
        }
        else
        {
            rrn_val = r[THARR2D(0, 0, 0)]*r[THARR2D(0, 0, 0)];
        }

        rrn_shared[lid] = rrn_val;
    }

    Reduce< double, BLOCK_SZ/2 >::run(rrn_shared, rrn, SUM);
}

/* reduce rrn */

__global__ void device_tea_leaf_cg_solve_calc_p
(int x_min, int x_max, int y_min, int y_max,
 double beta,
       double * __restrict const p,
 const double * __restrict const r,
 const double * __restrict const z,
 bool PRECONDITIONER)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        if (PRECONDITIONER)
        {
            p[THARR2D(0, 0, 0)] = z[THARR2D(0, 0, 0)] + beta*p[THARR2D(0, 0, 0)];
        }
        else
        {
            p[THARR2D(0, 0, 0)] = r[THARR2D(0, 0, 0)] + beta*p[THARR2D(0, 0, 0)];
        }
    }
}


