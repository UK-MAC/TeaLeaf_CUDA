
__global__ void device_tea_leaf_ppcg_solve_init_sd
(int x_min, int x_max, int y_min, int y_max,
 const double * __restrict const r,
 const double * __restrict const Mi,
       double * __restrict const sd,
 double theta)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        sd[THARR2D(0, 0, 0)] = r[THARR2D(0, 0, 0)]/theta;
    }
}

__global__ void device_tea_leaf_ppcg_solve_update_r
(int x_min, int x_max, int y_min, int y_max,
       double * __restrict const u,
       double * __restrict const r,
 const double * __restrict const Kx,
 const double * __restrict const Ky,
       double * __restrict const sd)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        const double result = (1.0
            + (Ky[THARR2D(0, 1, 0)] + Ky[THARR2D(0, 0, 0)])
            + (Kx[THARR2D(1, 0, 0)] + Kx[THARR2D(0, 0, 0)]))*sd[THARR2D(0, 0, 0)]
            - (Ky[THARR2D(0, 1, 0)]*sd[THARR2D(0, 1, 0)] + Ky[THARR2D(0, 0, 0)]*sd[THARR2D(0, -1, 0)])
            - (Kx[THARR2D(1, 0, 0)]*sd[THARR2D(1, 0, 0)] + Kx[THARR2D(0, 0, 0)]*sd[THARR2D(-1, 0, 0)]);

        r[THARR2D(0, 0, 0)] -= result;
        u[THARR2D(0, 0, 0)] += sd[THARR2D(0, 0, 0)];
    }
}

__global__ void device_tea_leaf_ppcg_solve_calc_sd
(int x_min, int x_max, int y_min, int y_max,
 const double * __restrict const r,
 const double * __restrict const Mi,
       double * __restrict const sd,
 const double * __restrict const alpha,
 const double * __restrict const beta,
 int step)
{
    __kernel_indexes;

    if (WITHIN_BOUNDS)
    {
        sd[THARR2D(0, 0, 0)] = alpha[step]*sd[THARR2D(0, 0, 0)]
                            + beta[step]*r[THARR2D(0, 0, 0)];
    }
}

